{"version":3,"file":"static/js/984.7e08be8c.chunk.js","mappings":"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","sources":["components/Dialogs/DialogItem/DialogItem.jsx","webpack://social-network/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.jsx","webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogsForm/Dialogs.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","webpack://social-network/./src/components/common/FormControls/FormControls.module.css?7a3d","components/common/FormControls/FormControls.jsx","utils/validators.js"],"sourcesContent":["import Avatar from '../../Avatar/Avatar';\nimport CostumLink from '../../CustomLink/CustomLink';\nimport { TEST_AVATAR_SRC } from '../../../constants/vars';\n\nconst DialogItem = (props) => {\n  const { id, name } = props;\n\n  return (\n    <CostumLink to={`/dialogs/${id}`} classname='flex'>\n      <Avatar src={TEST_AVATAR_SRC} />\n      {name}\n    </CostumLink>\n  )\n}\n\nexport default DialogItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__4pmH+\",\"right\":\"Message_right__xUF-O\"};","import cls from './Message.module.css';\nimport Avatar from '../../Avatar/Avatar';\nimport { TEST_AVATAR_SRC } from '../../../constants/vars';\n\nconst Message = (props) => {\n  const {message,id} = props;\n  const myID = 1;\n  \n  let classNames = id === myID ? cls.message : `${cls.message} ${cls.right}`;\n\n  return (\n    <div className={classNames}>\n      <Avatar src={TEST_AVATAR_SRC}/>\n      {message}\n    </div>\n  )\n}\n\nexport default Message;\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__IrJiW\",\"messages\":\"Dialogs_messages__SXgVy\"};","import Button from '../../Button/Button';\nimport { Field, reduxForm } from 'redux-form';\nimport { Input } from '../../common/FormControls/FormControls';\nimport { required, alphaNumeric } from '../../../utils/validators';\n\nconst DialogsForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          name='newMessage'\n          typeComponent = 'textarea'\n          component={Input}\n          validate={[required]}\n          warn={alphaNumeric}\n          placeholder=\"New message\"/>\n      </div>\n      <Button>Send</Button>\n    </form>\n  )\n}\n\nexport const DialogsReduxForm = reduxForm({form: 'dialogs'})(DialogsForm);\n","import DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport cls from './Dialogs.module.css';\nimport { DialogsReduxForm as DialogsForm } from './DialogsForm/Dialogs';\n\nconst Dialogs = (props) => {\n  const { dialogsData, messageData, sendMessage } = props;\n\n  return (\n    <div className={cls.dialogs}>\n      <div>\n        {dialogsData.map(dialogItem => <DialogItem key={dialogItem.id} id={dialogItem.id} name={dialogItem.name} />)}\n      </div>\n      <div>\n        <div className={cls.messages}>\n          {messageData.map(item => <Message message={item.message} key={item.id} id={item.id} />)}\n        </div>\n        <DialogsForm onSubmit={sendMessage}/>\n      </div>\n    </div>\n  );\n}\n\nexport default Dialogs;\n","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { sendMessage } from '../../store/dialog/slice';\nimport Dialogs from './Dialogs';\n\nconst DialogsContainer = () => {\n  const dispatch = useDispatch();\n\n  const dialogsData = useSelector(state => state.dialogs);\n  const { dialogs, messages } = dialogsData;\n\n  const sendMessageHandler = (values) => {\n    dispatch(sendMessage(values));\n  }\n\n  return <Dialogs \n    dialogsData={dialogs}\n    messageData={messages}\n    sendMessage={sendMessageHandler}/>\n}\n\nexport default DialogsContainer;\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"FormControls_input__N5HU6\",\"textarea\":\"FormControls_textarea__7E6E2\",\"warning\":\"FormControls_warning__mOtLP\",\"error\":\"FormControls_error__mrDja\"};","import classnames from 'classnames';\nimport { Field } from 'redux-form';\nimport cls from './FormControls.module.css';\n\nexport const Input = ({ input, meta, typeComponent, ...restProps }) => { \n  const { touched, error, warning } = meta;\n\n  const hasError = touched && error;\n  const hasWarn = touched && warning;\n\n  const classNames = classnames(cls[typeComponent], hasError && cls.error, hasWarn && cls.warning);\n\n  return (\n    <>\n      {\n        ( typeComponent === 'textarea' && <textarea {...input} {...restProps} className={classNames}/> ) ||\n        ( typeComponent === 'input' && <input {...input} {...restProps} className={classNames}/> ) \n      }\n      { hasError && <span className={cls.error}>{error}</span> }\n      { hasWarn && <span className={cls.warning}>{warning}</span> }\n    </>\n  );\n}\n\nexport const createField = (name, typeComponent, type, validate, warn, placeholder, text, props) => {\n  return (\n    <div>\n      <Field \n        name={name}\n        typeComponent={typeComponent}\n        component={Input} \n        type={type} \n        validate={validate}\n        warn={warn}\n        placeholder={placeholder} \n        {...props}/>\n      { text ? (<span>{text}</span>) : '' }\n    </div>\n  )\n}\n","export const required = value => (value ? undefined : 'Field is required');\r\n\r\nexport const alphaNumeric = value =>(value && /[^a-zA-Z0-9 ]/i.test(value) ? 'Only alphanumeric characters' : undefined);\r\n\r\nexport const maxLengthCreator = max => value => (value && value.length > max ? `Must be ${max} characters or less` : undefined);\r\n"],"names":["props","id","name","to","classname","Avatar","src","TEST_AVATAR_SRC","message","classNames","cls","className","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","typeComponent","component","Input","validate","required","warn","alphaNumeric","placeholder","Button","dialogsData","messageData","sendMessage","map","dialogItem","item","dispatch","useDispatch","useSelector","state","dialogs","messages","values","input","meta","restProps","touched","error","warning","hasError","hasWarn","classnames","createField","type","text","value","undefined","test","maxLengthCreator","max","length"],"sourceRoot":""}